import os
import sys
from typing import Optional

from langchain_community.utilities import SQLDatabase
from langchain_huggingface import HuggingFacePipeline
from langchain.chains import create_sql_query_chain
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_community.tools.sql_database.tool import QuerySQLDataBaseTool

from sqlalchemy import create_engine
import langchain
langchain.debug = True

##############################
# TINYLLAMA LOAD
##############################
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

MODEL_NAME = "TinyLlama/TinyLlama-1.1B-Chat-v1.0"


def load_tinyllama_langchain_llm():
    print("‚è≥ Loading TinyLlama model (HuggingFace style)...")
    tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
    model = AutoModelForCausalLM.from_pretrained(
        MODEL_NAME,
        torch_dtype=torch.float16,
        device_map="auto",
    )
    print("‚úÖ Model loaded!")

    hf_pipe = pipeline(
        "text-generation",
        model=model,
        tokenizer=tokenizer,
        max_new_tokens=128,
        temperature=0.7,
        top_p=0.9,
        pad_token_id=tokenizer.eos_token_id,
        do_sample=False,  # Deterministic (no sampling)
    )
    # Convert to a LangChain-compatible LLM
    llm = HuggingFacePipeline(pipeline=hf_pipe)
    return llm

def pick_tables(question: str, all_tables: list) -> list:
    """
    Very naive approach: pick tables whose name(s) appear in the user question.
    Fallback: pick first 3 tables.
    """
    question_lower = question.lower()
    relevant = [t for t in all_tables if t.lower() in question_lower]
    return relevant or all_tables[:3]


def main():
    # 1) Load local TinyLlama LLM
    llm = load_tinyllama_langchain_llm()

    # 2) MySQL credentials
    user = "root"
    password = "admin"
    host = "localhost"
    port = 3306
    database = "chatbot"

    db_uri = f"mysql+pymysql://{user}:{password}@{host}:{port}/{database}"

    print("\nüîπTinyLlama Chat w/ MySQL (Only raw DB data printed)\n")
    print("Type 'exit' or 'quit' to stop.\n")

    # Build a "wide" DB for table names
    wide_db = SQLDatabase.from_uri(db_uri)
    all_table_names = wide_db.get_usable_table_names()
    # Create a query tool for final DB execution
    query_tool = QuerySQLDataBaseTool(db=wide_db)

    # Minimal prompt that says: "Output only a valid SQL query"
    minimal_sql_prompt = PromptTemplate.from_template(
        "Generate a VALID MySQL query for this question:\n{question}\n\nOnly output the SQL query, nothing else."
    )

    while True:
        question = input("User Question: ")
        if question.strip().lower() in ["exit", "quit"]:
            break

        # 3) Select relevant tables
        relevant_tables = pick_tables(question, all_table_names)
        print(f"[DEBUG] Using tables: {relevant_tables}")

        # 4) Reflect only those tables
        filtered_db = SQLDatabase.from_uri(db_uri, include_tables=relevant_tables)

        # Create chain to produce *only* the SQL
        chain = create_sql_query_chain(
            llm=llm,
            db=filtered_db,
            prompt=minimal_sql_prompt,
            output_parser=StrOutputParser(),  # ensures raw string
        )

        # 5) Invoke chain => get SQL
        try:
            sql_query = chain.invoke({"question": question})
        except Exception as e:
            print(f"\n‚ùå Error generating SQL: {e}")
            continue

        # 6) Execute the query
        print(f"\n[DEBUG] Generated SQL:\n{sql_query}\n")
        try:
            rows = query_tool.run(sql_query)
        except Exception as e:
            print(f"‚ùå Error executing query: {e}")
            continue

        # 7) Print rows directly, no LLM summarization
        print("DB Results:\n")
        print(rows)  # or format them row-by-row

    print("üëã Exiting. Goodbye!")


if __name__ == "__main__":
    main()
